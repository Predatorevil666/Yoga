name: yoga-ci/cd
permissions:
  contents: read
  packages: write

on:
  push:
    branches: 
      - dev
      - feature/**
    tags:
    - 'v*.*.*'
  pull_request:
    branches: [main, dev]
  workflow_run:
    workflows: ["Semantic Release"]
    types:
      - completed
    branches:
      - main


concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
      NGINX_PORT: "80"
      AUTH_BACKEND_PORT: "8005"
      BACKEND_PORT: "8002"
      FRONTEND_PORT: "3001"
      AUTH_FRONTEND_PORT: "3002"
      ADMIN_BACKEND_PORT: "5001"
      ADMIN_FRONTEND_PORT: "3003"
      POSTGRES_PORT: "5432"

      # Резервные значения на случай отсутствия секретов
      POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'yoga_db' }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}

      DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/yoga_db' }}
      TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/test_db' }}
      AUTH_BACKEND_DB_URL: ${{ secrets.AUTH_BACKEND_DB_URL || 'postgresql://postgres:postgres@localhost:5432/yoga_db' }}
      DB_URL: ${{ secrets.DB_URL || 'postgresql://postgres:postgres@localhost:5432/yoga_db' }}

      PYTHONPATH: ${{ github.workspace }}
      ECHO_SQL: "True"

      DOCKER_REGISTRY: ghcr.io
      DOCKER_NAMESPACE: ${{ secrets.GHCR_OWNER || github.repository_owner }}

jobs:
  check_semantic_release:
    if: github.event_name == 'workflow_run'
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.get_release_info.outputs.new_release_published }}
      new_release_version: ${{ steps.get_release_info.outputs.new_release_version }}
    steps:
      - name: Get release info
        id: get_release_info
        run: |
          release_info=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
          version=$(echo "$release_info" | jq -r '.tag_name')
          echo "new_release_version=${version#v}" >> $GITHUB_OUTPUT
          echo "new_release_published=true" >> $GITHUB_OUTPUT

  backend_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
      fail-fast: false
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'yoga_db' }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create test database
        run: |
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD || 'postgres' }} psql -h localhost -U ${{ secrets.POSTGRES_USER || 'postgres' }} -d postgres -c "CREATE DATABASE test_db;"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('${{ matrix.service }}/requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service }}-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy
          pip install -r ${{ matrix.service }}/backend/requirements.txt

      - name: Copy ruff config
        run: |
          cp ./pyproject.toml ./${{ matrix.service }}/backend/pyproject.toml

      - name: Run ruff check
        run: |
          cd ${{ matrix.service }}/backend && ruff check . 1> ./ruff.log 2> ./ruff.error.log || true

      - name: Run ruff format check
        run: |
          cd ${{ matrix.service }}/backend && ruff format --check . 1> ./ruff.format.log 2> ./ruff.format.error.log || true

      - name: Type check with mypy
        run: |
          cd ${{ matrix.service }}/backend && mypy . 1> ./mypy.log 2> ./mypy.error.log || true

      - name: Run tests
        if: matrix.service != 'auth'
        run: |
          cd ${{ matrix.service }}/backend
          pytest ../../tests -v

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-backend-artifacts
          path: |
            ${{ matrix.service }}/backend/ruff.log
            ${{ matrix.service }}/backend/ruff.error.log
            ${{ matrix.service }}/backend/ruff.format.log
            ${{ matrix.service }}/backend/ruff.format.error.log
            ${{ matrix.service }}/backend/mypy.log
            ${{ matrix.service }}/backend/mypy.error.log

  frontend_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ${{ matrix.service }}/frontend
        run: npm ci

      - name: Lint and Type check Frontend
        working-directory: ${{ matrix.service }}/frontend
        run: npm run lint > lint.log 2> lint.error.log || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-frontend-artifacts
          path: |
            ${{ matrix.service }}/frontend/lint.log
            ${{ matrix.service }}/frontend/lint.error.log

  build_backends_and_push_to_ghcr:
    name: Build and push backend Docker images
    runs-on: ubuntu-latest
    needs: [backend_tests, check_semantic_release]
    if: |
      (github.event_name != 'workflow_run') ||
      (github.event_name == 'workflow_run' && needs.check_semantic_release.outputs.new_release_published == 'true')
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
      fail-fast: false
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.20.2
            network=host

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-backend-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-backend-${{ matrix.service }}-

      - name: Log in to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker tag
        id: set_docker_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "VERSION=${{ needs.check_semantic_release.outputs.new_release_version }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/heads/dev ]]; then
            echo "VERSION=dev" >> $GITHUB_ENV
          else
            SANITIZED_BRANCH=${GITHUB_REF#refs/heads/}
            SANITIZED_BRANCH=${SANITIZED_BRANCH//\//-}
            echo "VERSION=${SANITIZED_BRANCH}" >> $GITHUB_ENV
          fi

      - name: Push to GHCR registry
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service }}/backend
          file: ${{ matrix.service }}/backend/Dockerfile
          push: true
          build-args: |
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            TEST_DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}
            AUTH_BACKEND_DB_URL=${{ secrets.AUTH_BACKEND_DB_URL }}
            DB_URL=${{ secrets.DB_URL }}
            ECHO_SQL=${{ env.ECHO_SQL }}
            PYTHONPATH=${{ env.PYTHONPATH }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/yoga-${{ matrix.service }}-backend:${{ env.VERSION }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/yoga-${{ matrix.service }}-backend:latest

  build_frontends_and_push_to_ghcr:
    name: Build and push frontend Docker images
    runs-on: ubuntu-latest
    needs: [frontend_test, check_semantic_release]
    if: |
      (github.event_name != 'workflow_run') ||
      (github.event_name == 'workflow_run' && needs.check_semantic_release.outputs.new_release_published == 'true')
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
      fail-fast: false
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.20.2
            network=host

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-frontend-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-frontend-${{ matrix.service }}-

      - name: Log in to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker tag
        id: set_docker_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "VERSION=${{ needs.check_semantic_release.outputs.new_release_version }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/heads/dev ]]; then
            echo "VERSION=dev" >> $GITHUB_ENV
          else
            SANITIZED_BRANCH=${GITHUB_REF#refs/heads/}
            SANITIZED_BRANCH=${SANITIZED_BRANCH//\//-}
            echo "VERSION=${SANITIZED_BRANCH}" >> $GITHUB_ENV
          fi

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service }}/frontend
          file: ${{ matrix.service }}/frontend/Dockerfile
          push: true
          build-args: |
            API_URL=${{ secrets.FRONTEND_API_URL }}
            NGINX_PORT=${{ env.NGINX_PORT }}
            AUTH_FRONTEND_PORT=${{ env.AUTH_FRONTEND_PORT }}
            FRONTEND_PORT=${{ env.FRONTEND_PORT }}
            ADMIN_FRONTEND_PORT=${{ env.ADMIN_FRONTEND_PORT }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/yoga-${{ matrix.service }}-frontend:${{ env.VERSION }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/yoga-${{ matrix.service }}-frontend:latest

  notify:
    name: Send Build Notification
    needs: [build_backends_and_push_to_ghcr, build_frontends_and_push_to_ghcr]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build status
        id: check_status
        run: |
          if [[ "${{ needs.build_backends_and_push_to_ghcr.result }}" == "success" && "${{ needs.build_frontends_and_push_to_ghcr.result }}" == "success" ]]; then
            echo "build_status=success" >> $GITHUB_OUTPUT
          else
            echo "build_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Set event details
        id: event_details
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "event_type=semantic-release" >> $GITHUB_OUTPUT
            echo "version=${{ needs.check_semantic_release.outputs.new_release_version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "event_type=tag" >> $GITHUB_OUTPUT
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/dev ]]; then
            echo "event_type=dev" >> $GITHUB_OUTPUT
            echo "version=dev" >> $GITHUB_OUTPUT
          else
            BRANCH=${GITHUB_REF#refs/heads/}
            echo "event_type=branch" >> $GITHUB_OUTPUT
            echo "version=${BRANCH}" >> $GITHUB_OUTPUT
          fi

      - name: Send Success Notification
        if: steps.check_status.outputs.build_status == 'success'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ✅ CI/CD успешно завершен!
            
            📦 Тип события: ${{ steps.event_details.outputs.event_type }}
            🏷️ Версия: ${{ steps.event_details.outputs.version }}
            👤 Автор: ${{ github.actor }}
            💬 Коммит: ${{ github.event.head_commit.message || 'Н/Д' }}
            
            🔗 Ссылка на workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Send Failure Notification
        if: steps.check_status.outputs.build_status == 'failure'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ❌ CI/CD завершился с ошибкой!
            
            📦 Тип события: ${{ steps.event_details.outputs.event_type }}
            🏷️ Версия: ${{ steps.event_details.outputs.version }}
            👤 Автор: ${{ github.actor }}
            💬 Коммит: ${{ github.event.head_commit.message || 'Н/Д' }}
            
            🔗 Ссылка на workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

