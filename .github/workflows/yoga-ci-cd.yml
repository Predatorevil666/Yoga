name: yoga-ci/cd
permissions:
  contents: read
  packages: write

on:
  push:
    branches: 
      - main
      - dev
      - feature/**
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main, dev]

env:
      NGINX_PORT: "80"
      AUTH_BACKEND_PORT: "8005"
      BACKEND_PORT: "8002"
      FRONTEND_PORT: "3001"
      AUTH_FRONTEND_PORT: "3002"
      ADMIN_BACKEND_PORT: "5001"
      ADMIN_FRONTEND_PORT: "3003"
      POSTGRES_PORT: "5432"

      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      AUTH_BACKEND_DB_URL: ${{ secrets.AUTH_BACKEND_DB_URL }}
      DB_URL: ${{ secrets.DB_URL }}

      PYTHONPATH: ${{ github.workspace }}
      ECHO_SQL: "True"

      DOCKER_REGISTRY: ghcr.io
      DOCKER_NAMESPACE: ${{ secrets.GHCR_OWNER }}



jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Determine Docker tag version
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "version=latest" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/dev ]]; then
            echo "version=dev" >> $GITHUB_OUTPUT
          else
            SANITIZED_BRANCH=${GITHUB_REF#refs/heads/}
            SANITIZED_BRANCH=${SANITIZED_BRANCH//\//-}
            echo "version=${SANITIZED_BRANCH}" >> $GITHUB_OUTPUT
          fi
  
  backend_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
      fail-fast: false
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Create test database
        run: |
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d postgres -c "CREATE DATABASE test_db;"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('${{ matrix.service }}/requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service }}-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy
          pip install -r ${{ matrix.service }}/backend/requirements.txt

      - name: Copy ruff config
        run: |
          cp ./pyproject.toml ./${{ matrix.service }}/backend/pyproject.toml

      - name: Run ruff check
        run: |
          cd ${{ matrix.service }}/backend && ruff check . 1> ./ruff.log 2> ./ruff.error.log || true

      - name: Run ruff format check
        run: |
          cd ${{ matrix.service }}/backend && ruff format --check . 1> ./ruff.format.log 2> ./ruff.format.error.log || true

      - name: Type check with mypy
        run: |
          cd ${{ matrix.service }}/backend && mypy . 1> ./mypy.log 2> ./mypy.error.log || true

      - name: Run tests
        if: matrix.service != 'auth'
        run: |
          cd ${{ matrix.service }}/backend
          pytest ../../tests -v

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-backend-artifacts
          path: |
            ${{ matrix.service }}/backend/ruff.log
            ${{ matrix.service }}/backend/ruff.error.log
            ${{ matrix.service }}/backend/ruff.format.log
            ${{ matrix.service }}/backend/ruff.format.error.log
            ${{ matrix.service }}/backend/mypy.log
            ${{ matrix.service }}/backend/mypy.error.log

  frontend_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ${{ matrix.service }}/frontend
        run: npm ci

      - name: Lint and Type check Frontend
        working-directory: ${{ matrix.service }}/frontend
        run: npm run lint > lint.log 2> lint.error.log || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-frontend-artifacts
          path: |
            ${{ matrix.service }}/frontend/lint.log
            ${{ matrix.service }}/frontend/lint.error.log

  build_backends_and_push_to_ghcr:
    name: Build and push backend Docker images
    runs-on: ubuntu-latest
    needs: [backend_tests, determine-version]
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
      fail-fast: false
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.20.2
            network=host

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-backend-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-backend-${{ matrix.service }}-

      - name: Log in to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GHCR registry
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service }}/backend
          file: ${{ matrix.service }}/backend/Dockerfile
          push: true
          build-args: |
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            TEST_DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}
            AUTH_BACKEND_DB_URL=${{ secrets.AUTH_BACKEND_DB_URL }}
            DB_URL=${{ secrets.DB_URL }}
            ECHO_SQL=${{ env.ECHO_SQL }}
            PYTHONPATH=${{ env.PYTHONPATH }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/yoga-${{ matrix.service }}-backend:${{ needs.determine-version.outputs.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/yoga-${{ matrix.service }}-backend:latest

  build_frontends_and_push_to_ghcr:
    name: Build and push frontend Docker images
    runs-on: ubuntu-latest
    needs: [frontend_test, determine-version]
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
      fail-fast: false
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.20.2
            network=host

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-frontend-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-frontend-${{ matrix.service }}-

      - name: Log in to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.service }}/frontend
          file: ${{ matrix.service }}/frontend/Dockerfile
          push: true
          build-args: |
            API_URL=${{ secrets.FRONTEND_API_URL }}
            NGINX_PORT=${{ env.NGINX_PORT }}
            AUTH_FRONTEND_PORT=${{ env.AUTH_FRONTEND_PORT }}
            FRONTEND_PORT=${{ env.FRONTEND_PORT }}
            ADMIN_FRONTEND_PORT=${{ env.ADMIN_FRONTEND_PORT }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/yoga-${{ matrix.service }}-frontend:${{ needs.determine-version.outputs.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/yoga-${{ matrix.service }}-frontend:latest
  send_message:
    runs-on: ubuntu-latest
    needs: 
     - build_backends_and_push_to_ghcr
     - build_frontends_and_push_to_ghcr
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Send message to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ startsWith(github.ref, 'refs/tags/') && '🚀 CI/CD для тега завершен!' || '✅ CI/CD для коммита завершен!' }}
            Автор изменения: ${{ github.actor }}
            Сообщение коммита: '${{ github.event.commits[0].message }}'
            Ссылка на коммит: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
            ${{ startsWith(github.ref, 'refs/tags/') && format('Тег: {0}', github.ref_name) || '' }}

