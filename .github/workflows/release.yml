name: Release Automation

permissions:
  contents: write  
  packages: read

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up environment variables
        id: vars
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get all tags sorted by version
          ALL_TAGS=$(git tag --sort=-v:refname)
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          
          # Find the previous tag (the tag before the current one)
          PREV_TAG=""
          FOUND_CURRENT=false
          
          for tag in $ALL_TAGS; do
            if [ "$FOUND_CURRENT" = true ]; then
              PREV_TAG=$tag
              break
            fi
            
            if [ "$tag" = "$CURRENT_TAG" ]; then
              FOUND_CURRENT=true
            fi
          done
          
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREV_TAG"
          
          if [ -z "$PREV_TAG" ]; then
            # If there's no previous tag, limit to last 10 commits
            echo "No previous tag found. Showing last 10 commits."
            git log -n 10 --pretty=format:"- %s (%h)" > CHANGELOG.md
          else
            # List commits between current and previous tag
            echo "Showing commits between $PREV_TAG and $CURRENT_TAG"
            git log --pretty=format:"- %s (%h)" $PREV_TAG..$CURRENT_TAG > CHANGELOG.md
          fi
          
          # Convert changelog to single line with JSON escaping
          CHANGELOG_CONTENT=$(cat CHANGELOG.md | jq -Rs .)
          echo "changelog=${CHANGELOG_CONTENT}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.VERSION }}
          release_name: Release ${{ steps.vars.outputs.VERSION }}
          body: |
            ## Yoga Platform Release ${{ steps.vars.outputs.VERSION }}
            **Release Date:** ${{ steps.vars.outputs.DATE }}
            
            ### What's Changed
            ${{ fromJson(steps.changelog.outputs.changelog) }}
            
            ### Docker Images
            - Admin Backend: `ghcr.io/${{ github.repository_owner }}/yoga-admin-backend:${{ steps.vars.outputs.VERSION }}`
            - Admin Frontend: `ghcr.io/${{ github.repository_owner }}/yoga-admin-frontend:${{ steps.vars.outputs.VERSION }}`
            - Application Backend: `ghcr.io/${{ github.repository_owner }}/yoga-application-backend:${{ steps.vars.outputs.VERSION }}`
            - Application Frontend: `ghcr.io/${{ github.repository_owner }}/yoga-application-frontend:${{ steps.vars.outputs.VERSION }}`
            - Auth Backend: `ghcr.io/${{ github.repository_owner }}/yoga-auth-backend:${{ steps.vars.outputs.VERSION }}`
            - Auth Frontend: `ghcr.io/${{ github.repository_owner }}/yoga-auth-frontend:${{ steps.vars.outputs.VERSION }}`
          draft: false
          prerelease: false

      - name: Send Release Notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üéâ RELEASE: –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ ${{ steps.vars.outputs.VERSION }} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! üéâ
            
            üìÖ –î–∞—Ç–∞: ${{ steps.vars.outputs.DATE }}
            üë§ –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            
            üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è:
            ${{ fromJson(steps.changelog.outputs.changelog) }}
            
            üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ª–∏–∑: https://github.com/${{ github.repository }}/releases/tag/${{ steps.vars.outputs.VERSION }} 