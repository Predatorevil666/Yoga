name: yoga-ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
      fail-fast: false
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('${{ matrix.service }}/requirements.txt')}}
          restore-key: |
            ${{ runner.os }}-pip-${{ matrix.service }}-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==7.2.0 isort==6.0.1 black mypy
          pip install -r ${{ matrix.service }}/backend/requirements.txt

      - name: Copy isort config
        run: |
          cp ./pyproject.toml ./${{ matrix.service }}/backend/pyproject.toml

      - name: Run isort check
        run: |
          cd ${{ matrix.service }}/backend && isort . 1> ../isort.log 2> ../isort.error.log || true
          
      - name: Test with flake8
        run: |
          cd ${{ matrix.service }}/backend && flake8 . 1> ./flake8.log 2> ./flake8.error.log || true

      - name: Format with black
        run: |
          cd ${{ matrix.service }}/backend && black . 1> ./black.log 2> ./black.error.log || true

      - name: Type check with mypy
        run: |
          cd ${{ matrix.service }}/backend && mypy . 1> ./mypy.log 2> ./mypy.error.log || true

      - name: Run tests
        run: |
          cd ${{ matrix.service }}/backend
          pytest tests/ -v

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-artifacts
          path: |
            flake8.log
            isort.log
            black.log
            mypy.log

  # frontend_test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       service: ['admin', 'application', 'auth']
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18"

  #     - name: Install dependencies
  #       run: |
  #         if [ "${{ matrix.service }}" = "application" ]; then
  #           cd application/frontend
  #         elif [ "${{ matrix.service }}" = "auth" ]; then
  #           cd auth/frontend
  #         else
  #           cd admin/frontend
  #         fi
  #         npm install

  #     - name: Lint with ESLint
  #       run: |
  #         if [ "${{ matrix.service }}" = "application" ]; then
  #           cd application/frontend
  #         elif [ "${{ matrix.service }}" = "auth" ]; then
  #           cd auth/frontend
  #         else
  #           cd admin/frontend
  #         fi
  #         npx eslint . --ext .js,.jsx,.ts,.tsx

  #     - name: Type check with TypeScript
  #       run: |
  #         if [ "${{ matrix.service }}" = "application" ]; then
  #           cd application/frontend
  #         elif [ "${{ matrix.service }}" = "auth" ]; then
  #           cd auth/frontend
  #         else
  #           cd admin/frontend
  #         fi
  #         npx tsc --noEmit

  #     - name: Run tests
  #       run: |
  #         if [ "${{ matrix.service }}" = "application" ]; then
  #           cd application/frontend
  #         elif [ "${{ matrix.service }}" = "auth" ]; then
  #           cd auth/frontend
  #         else
  #           cd admin/frontend
  #         fi
  #         npm test

  send_message:
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
      - name: Send message to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ü•≥
            –ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${{ github.actor }}
            –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: '${{ github.event.commits[0].message }}'
            –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–º–∏—Ç: https://github.com/${{ github.repository }}/commit/${{ github.sha }}

