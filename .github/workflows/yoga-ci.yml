name: yoga-ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
      NGINX_PORT: "80"
      AUTH_BACKEND_PORT: "8005"
      BACKEND_PORT: "8002"
      FRONTEND_PORT: "3001"
      AUTH_FRONTEND_PORT: "3002"
      ADMIN_BACKEND_PORT: "5001"
      ADMIN_FRONTEND_PORT: "3003"
      POSTGRES_PORT: "5432"

      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      AUTH_BACKEND_DB_URL: ${{ secrets.AUTH_BACKEND_DB_URL }}
      DB_URL: ${{ secrets.DB_URL }}

      PYTHONPATH: ${{ github.workspace }}
      ECHO_SQL: "True"   

jobs:
  backend_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
      fail-fast: false
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create test database
        run: |
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d postgres -c "CREATE DATABASE test_db;"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('${{ matrix.service }}/requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service }}-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy
          pip install -r ${{ matrix.service }}/backend/requirements.txt

      - name: Copy ruff config
        run: |
          cp ./pyproject.toml ./${{ matrix.service }}/backend/pyproject.toml

      - name: Run ruff check
        run: |
          cd ${{ matrix.service }}/backend && ruff check . 1> ./ruff.log 2> ./ruff.error.log || true

      - name: Run ruff format check
        run: |
          cd ${{ matrix.service }}/backend && ruff format --check . 1> ./ruff.format.log 2> ./ruff.format.error.log || true

      - name: Type check with mypy
        run: |
          cd ${{ matrix.service }}/backend && mypy . 1> ./mypy.log 2> ./mypy.error.log || true

      - name: Run tests
        if: matrix.service != 'auth'
        run: |
          cd ${{ matrix.service }}/backend
          pytest ../../tests -v

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-artifacts
          path: |
            ${{ matrix.service }}/backend/ruff.log
            ${{ matrix.service }}/backend/ruff.error.log
            ${{ matrix.service }}/backend/ruff.format.log
            ${{ matrix.service }}/backend/ruff.format.error.log
            ${{ matrix.service }}/backend/mypy.log
            ${{ matrix.service }}/backend/mypy.error.log

  frontend_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['admin', 'application', 'auth']
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ${{ matrix.service }}/frontend
        run: npm ci

      - name: Lint and Type check Frontend
        working-directory: ${{ matrix.service }}/frontend
        run: npm run lint > lint.log 2> lint.error.log || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-frontend-artifacts
          path: |
            ${{ matrix.service }}/frontend/lint.log
            ${{ matrix.service }}/frontend/lint.error.log

  send_message:
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
      - name: Send message to Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}, ${{ secrets.TELEGRAM_TO_2 }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ü•≥
            –ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${{ github.actor }}
            –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: '${{ github.event.commits[0].message }}'
            –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–º–∏—Ç: https://github.com/${{ github.repository }}/commit/${{ github.sha }}

